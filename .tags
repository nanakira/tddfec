!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALL_LEDS_OFF	.\src\LedDriver\LedDriver.c	/^enum {ALL_LEDS_OFF = 0, ALL_LEDS_ON = 0xffff};$/;"	e	enum:__anon11	file:
ALL_LEDS_ON	.\src\LedDriver\LedDriver.c	/^enum {ALL_LEDS_OFF = 0, ALL_LEDS_ON = 0xffff};$/;"	e	enum:__anon11	file:
BOOL	.\include\LedDriver\LedDriver.h	/^typedef int BOOL;$/;"	t
BOOL	.\include\util\common.h	34;"	d
BOUND	.\tests\HomeAutomation\RandomMinuteTest.cpp	/^enum { BOUND=30 };$/;"	e	enum:__anon16	file:
BUFFER_GUARD	.\src\util\CircularBuffer.c	/^enum {BUFFER_GUARD = -999};$/;"	e	enum:__anon13	file:
BlockProtectionErrorBit	.\include\IO\m28w160ect.h	/^	BlockProtectionErrorBit = 1<<1,$/;"	e	enum:__anon7
CircularBuffer	.\include\util\CircularBuffer.h	/^typedef struct CircularBufferStruct * CircularBuffer;$/;"	t	typeref:struct:CircularBufferStruct
CircularBufferStruct	.\src\util\CircularBuffer.c	/^typedef struct CircularBufferStruct$/;"	s	file:
CircularBufferStruct	.\src\util\CircularBuffer.c	/^} CircularBufferStruct ;$/;"	t	typeref:struct:CircularBufferStruct	file:
CircularBuffer_Capacity	.\src\util\CircularBuffer.c	/^int CircularBuffer_Capacity(CircularBuffer self)$/;"	f
CircularBuffer_Create	.\src\util\CircularBuffer.c	/^CircularBuffer CircularBuffer_Create(int capacity)$/;"	f
CircularBuffer_Destroy	.\src\util\CircularBuffer.c	/^void CircularBuffer_Destroy(CircularBuffer self)$/;"	f
CircularBuffer_Get	.\src\util\CircularBuffer.c	/^int CircularBuffer_Get(CircularBuffer self)$/;"	f
CircularBuffer_IsEmpty	.\src\util\CircularBuffer.c	/^int CircularBuffer_IsEmpty(CircularBuffer self)$/;"	f
CircularBuffer_IsFull	.\src\util\CircularBuffer.c	/^int CircularBuffer_IsFull(CircularBuffer self)$/;"	f
CircularBuffer_Print	.\src\util\CircularBuffer.c	/^void CircularBuffer_Print(CircularBuffer self)$/;"	f
CircularBuffer_Put	.\src\util\CircularBuffer.c	/^int CircularBuffer_Put(CircularBuffer self, int value)$/;"	f
CircularBuffer_VerifyIntegrity	.\src\util\CircularBuffer.c	/^int CircularBuffer_VerifyIntegrity(CircularBuffer self)$/;"	f
CommandRegister	.\include\IO\m28w160ect.h	/^	CommandRegister = 0x0,$/;"	e	enum:__anon5
DIM	.\src\HomeAutomation\LightScheduler.c	/^    TURN_ON, TURN_OFF, DIM, RANDOM_ON, RANDOM_OFF,$/;"	e	enum:__anon9	file:
D_CircularBuffer_H	.\include\util\CircularBuffer.h	30;"	d
D_FakeRandomMinute_H	.\mocks\FakeRandomMinute.h	28;"	d
D_FakeTimeService_H	.\tests\HomeAutomation\FakeTimeService.h	29;"	d
D_Flash_H	.\include\IO\Flash.h	29;"	d
D_FormatOutputSpy_H	.\mocks\FormatOutputSpy.h	29;"	d
D_IO_H	.\include\IO\IO.h	30;"	d
D_LedDriver_H	.\include\LedDriver\LedDriver.h	2;"	d
D_LightControllerSpy_H	.\tests\HomeAutomation\LightControllerSpy.h	29;"	d
D_LightController_H	.\include\HomeAutomation\LightController.h	29;"	d
D_LightScheduler_H	.\include\HomeAutomation\LightScheduler.h	29;"	d
D_MicroTime_H	.\include\IO\MicroTime.h	28;"	d
D_MockIO_H	.\mocks\MockIO.h	29;"	d
D_RandomMinute_H	.\include\HomeAutomation\RandomMinute.h	29;"	d
D_RuntimeErrorStub_H	.\mocks\RuntimeErrorStub.h	28;"	d
D_RuntimeError_H	.\include\util\RuntimeError.h	29;"	d
D_TimeService_H	.\include\HomeAutomation\TimeService.h	29;"	d
D_Utils_H	.\include\util\Utils.h	31;"	d
D_common_H	.\include\util\common.h	31;"	d
D_m28w160ect_H	.\include\IO\m28w160ect.h	29;"	d
Day	.\include\HomeAutomation\LightScheduler.h	/^} Day;$/;"	t	typeref:enum:__anon2
DoesLightRespondToday	.\src\HomeAutomation\LightScheduler.c	/^static int DoesLightRespondToday(Time * time, int reactionDay)$/;"	f	file:
EVERYDAY	.\include\HomeAutomation\LightScheduler.h	/^    NONE=-1, EVERYDAY=10, WEEKDAY, WEEKEND,$/;"	e	enum:__anon2
EraseErrorBit	.\include\IO\m28w160ect.h	/^	EraseErrorBit = 1<<5,$/;"	e	enum:__anon7
EraseSuspendBit	.\include\IO\m28w160ect.h	/^	EraseSuspendBit = 1<<6,$/;"	e	enum:__anon7
Expectation	.\mocks\MockIO.c	/^typedef struct Expectation$/;"	s	file:
Expectation	.\mocks\MockIO.c	/^} Expectation;$/;"	t	typeref:struct:Expectation	file:
FALSE	.\include\LedDriver\LedDriver.h	6;"	d
FALSE	.\include\util\common.h	42;"	d
FIRST_LED	.\src\LedDriver\LedDriver.c	/^enum {FIRST_LED = 1, LAST_LED = 16};$/;"	e	enum:__anon12	file:
FLASH_PROGRAM_ERROR	.\include\IO\Flash.h	/^	FLASH_PROGRAM_ERROR,$/;"	e	enum:__anon4
FLASH_PROTECTED_BLOCK_ERROR	.\include\IO\Flash.h	/^	FLASH_PROTECTED_BLOCK_ERROR,$/;"	e	enum:__anon4
FLASH_READ	.\mocks\MockIO.c	/^    FLASH_READ, FLASH_WRITE, NoExpectedValue = -1$/;"	e	enum:__anon8	file:
FLASH_READ_BACK_ERROR	.\include\IO\Flash.h	/^	FLASH_READ_BACK_ERROR,$/;"	e	enum:__anon4
FLASH_SUCCESS	.\include\IO\Flash.h	/^	FLASH_SUCCESS = 0,$/;"	e	enum:__anon4
FLASH_TIMEOUT_ERROR	.\include\IO\Flash.h	/^	FLASH_TIMEOUT_ERROR$/;"	e	enum:__anon4
FLASH_UNKNOWN_PROGRAM_ERROR	.\include\IO\Flash.h	/^	FLASH_UNKNOWN_PROGRAM_ERROR,$/;"	e	enum:__anon4
FLASH_VPP_ERROR	.\include\IO\Flash.h	/^	FLASH_VPP_ERROR,$/;"	e	enum:__anon4
FLASH_WRITE	.\mocks\MockIO.c	/^    FLASH_READ, FLASH_WRITE, NoExpectedValue = -1$/;"	e	enum:__anon8	file:
FLASH_WRITE_TIMEOUT_IN_MICROSECONDS	.\src\IO\Flash.c	33;"	d	file:
FRIDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
FakeRandomMinute_Get	.\mocks\FakeRandomMinute.c	/^int FakeRandomMinute_Get(void)$/;"	f
FakeRandomMinute_Reset	.\mocks\FakeRandomMinute.c	/^void FakeRandomMinute_Reset(void)$/;"	f
FakeRandomMinute_SetFirstAndIncrement	.\mocks\FakeRandomMinute.c	/^void FakeRandomMinute_SetFirstAndIncrement(int s, int i)$/;"	f
FakeTimeService_GetAlarmCallback	.\tests\HomeAutomation\FakeTimeService.c	/^WakeUpCallback FakeTimeService_GetAlarmCallback(void)$/;"	f
FakeTimeService_GetAlarmPeriod	.\tests\HomeAutomation\FakeTimeService.c	/^int FakeTimeService_GetAlarmPeriod(void)$/;"	f
FakeTimeService_SetDay	.\tests\HomeAutomation\FakeTimeService.c	/^void FakeTimeService_SetDay(int day)$/;"	f
FakeTimeService_SetMinute	.\tests\HomeAutomation\FakeTimeService.c	/^void FakeTimeService_SetMinute(int minute)$/;"	f
FlashStatus	.\include\IO\Flash.h	/^} FlashStatus;$/;"	t	typeref:enum:__anon4
Flash_Command	.\include\IO\m28w160ect.h	/^} Flash_Command;$/;"	t	typeref:enum:__anon6
Flash_Create	.\src\IO\Flash.c	/^void Flash_Create(void)$/;"	f
Flash_Destroy	.\src\IO\Flash.c	/^void Flash_Destroy(void)$/;"	f
Flash_Registers	.\include\IO\m28w160ect.h	/^} Flash_Registers;$/;"	t	typeref:enum:__anon5
Flash_Write	.\src\IO\Flash.c	/^int Flash_Write(ioAddress address, ioData data)$/;"	f
FormatOutput	.\src\util\Utils.c	/^int (*FormatOutput)(const char * format, ...) = printf;$/;"	v
FormatOutputSpy	.\mocks\FormatOutputSpy.c	/^int FormatOutputSpy(const char * format, ...)$/;"	f
FormatOutputSpy_Create	.\mocks\FormatOutputSpy.c	/^void FormatOutputSpy_Create(int size)$/;"	f
FormatOutputSpy_Destroy	.\mocks\FormatOutputSpy.c	/^void FormatOutputSpy_Destroy(void)$/;"	f
FormatOutputSpy_GetOutput	.\mocks\FormatOutputSpy.c	/^const char * FormatOutputSpy_GetOutput(void)$/;"	f
IO_Read	.\mocks\MockIO.c	/^ioData IO_Read(ioAddress addr)$/;"	f
IO_Read	.\src\IO\IO.c	/^ioData IO_Read(ioAddress addr)$/;"	f
IO_Write	.\mocks\MockIO.c	/^void IO_Write(ioAddress addr, ioData value)$/;"	f
IO_Write	.\src\IO\IO.c	/^void IO_Write(ioAddress addr, ioData data)$/;"	f
IsLedOutOfBounds	.\src\LedDriver\LedDriver.c	/^static BOOL IsLedOutOfBounds(int ledNumber)$/;"	f	file:
LAST_LED	.\src\LedDriver\LedDriver.c	/^enum {FIRST_LED = 1, LAST_LED = 16};$/;"	e	enum:__anon12	file:
LIGHT_ID_UNKNOWN	.\tests\HomeAutomation\LightControllerSpy.h	/^    LIGHT_ID_UNKNOWN = -1, LIGHT_STATE_UNKNOWN = -1,$/;"	e	enum:__anon15
LIGHT_OFF	.\tests\HomeAutomation\LightControllerSpy.h	/^    LIGHT_OFF = 0, LIGHT_ON = 1$/;"	e	enum:__anon15
LIGHT_ON	.\tests\HomeAutomation\LightControllerSpy.h	/^    LIGHT_OFF = 0, LIGHT_ON = 1$/;"	e	enum:__anon15
LIGHT_STATE_UNKNOWN	.\tests\HomeAutomation\LightControllerSpy.h	/^    LIGHT_ID_UNKNOWN = -1, LIGHT_STATE_UNKNOWN = -1,$/;"	e	enum:__anon15
LS_ID_OUT_OF_BOUNDS	.\include\HomeAutomation\LightScheduler.h	/^enum { LS_OK, LS_TOO_MANY_EVENTS, LS_ID_OUT_OF_BOUNDS };$/;"	e	enum:__anon3
LS_OK	.\include\HomeAutomation\LightScheduler.h	/^enum { LS_OK, LS_TOO_MANY_EVENTS, LS_ID_OUT_OF_BOUNDS };$/;"	e	enum:__anon3
LS_TOO_MANY_EVENTS	.\include\HomeAutomation\LightScheduler.h	/^enum { LS_OK, LS_TOO_MANY_EVENTS, LS_ID_OUT_OF_BOUNDS };$/;"	e	enum:__anon3
LedDriver_Create	.\src\LedDriver\LedDriver.c	/^void LedDriver_Create(uint16_t * address)$/;"	f
LedDriver_Destroy	.\src\LedDriver\LedDriver.c	/^void LedDriver_Destroy(void)$/;"	f
LedDriver_IsOff	.\src\LedDriver\LedDriver.c	/^BOOL LedDriver_IsOff(int ledNumber)$/;"	f
LedDriver_IsOn	.\src\LedDriver\LedDriver.c	/^BOOL LedDriver_IsOn(int ledNumber)$/;"	f
LedDriver_TurnAllOff	.\src\LedDriver\LedDriver.c	/^void LedDriver_TurnAllOff(void)$/;"	f
LedDriver_TurnAllOn	.\src\LedDriver\LedDriver.c	/^void LedDriver_TurnAllOn(void)$/;"	f
LedDriver_TurnOff	.\src\LedDriver\LedDriver.c	/^void LedDriver_TurnOff(int ledNumber)$/;"	f
LedDriver_TurnOn	.\src\LedDriver\LedDriver.c	/^void LedDriver_TurnOn(int ledNumber)$/;"	f
LightControllerSpy_GetLastId	.\tests\HomeAutomation\LightControllerSpy.c	/^int LightControllerSpy_GetLastId(void)$/;"	f
LightControllerSpy_GetLastState	.\tests\HomeAutomation\LightControllerSpy.c	/^int LightControllerSpy_GetLastState(void)$/;"	f
LightControllerSpy_GetLightState	.\tests\HomeAutomation\LightControllerSpy.c	/^int LightControllerSpy_GetLightState(int id)$/;"	f
LightController_Create	.\tests\HomeAutomation\LightControllerSpy.c	/^void LightController_Create(void)$/;"	f
LightController_Destroy	.\tests\HomeAutomation\LightControllerSpy.c	/^void LightController_Destroy(void)$/;"	f
LightController_Off	.\tests\HomeAutomation\LightControllerSpy.c	/^void LightController_Off(int id)$/;"	f
LightController_On	.\tests\HomeAutomation\LightControllerSpy.c	/^void LightController_On(int id)$/;"	f
LightScheduler_Create	.\src\HomeAutomation\LightScheduler.c	/^void LightScheduler_Create(void)$/;"	f
LightScheduler_Destroy	.\src\HomeAutomation\LightScheduler.c	/^void LightScheduler_Destroy(void)$/;"	f
LightScheduler_Randomize	.\src\HomeAutomation\LightScheduler.c	/^void LightScheduler_Randomize(int id, Day day, int minuteOfDay)$/;"	f
LightScheduler_ScheduleRemove	.\src\HomeAutomation\LightScheduler.c	/^void LightScheduler_ScheduleRemove(int id, Day day, int minute)$/;"	f
LightScheduler_ScheduleTurnOff	.\src\HomeAutomation\LightScheduler.c	/^int LightScheduler_ScheduleTurnOff(int id, Day day, int minuteOfDay)$/;"	f
LightScheduler_ScheduleTurnOn	.\src\HomeAutomation\LightScheduler.c	/^int LightScheduler_ScheduleTurnOn(int id, Day day, int minuteOfDay)$/;"	f
LightScheduler_WakeUp	.\src\HomeAutomation\LightScheduler.c	/^void LightScheduler_WakeUp(void)$/;"	f
MAX_EVENTS	.\src\HomeAutomation\LightScheduler.c	/^    MAX_EVENTS = 128$/;"	e	enum:__anon9	file:
MAX_LIGHTS	.\include\HomeAutomation\LightController.h	/^enum { MAX_LIGHTS = 32 };$/;"	e	enum:__anon1
MONDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
MockIO_Create	.\mocks\MockIO.c	/^void MockIO_Create(int maxExpectations)$/;"	f
MockIO_Destroy	.\mocks\MockIO.c	/^void MockIO_Destroy(void)$/;"	f
MockIO_Expect_ReadThenReturn	.\mocks\MockIO.c	/^void MockIO_Expect_ReadThenReturn(ioAddress addr, ioData value)$/;"	f
MockIO_Expect_Write	.\mocks\MockIO.c	/^void MockIO_Expect_Write(ioAddress addr, ioData value)$/;"	f
MockIO_Verify_Complete	.\mocks\MockIO.c	/^void MockIO_Verify_Complete(void)$/;"	f
NONE	.\include\HomeAutomation\LightScheduler.h	/^    NONE=-1, EVERYDAY=10, WEEKDAY, WEEKEND,$/;"	e	enum:__anon2
NULL	.\include\util\common.h	46;"	d
NoExpectedValue	.\mocks\MockIO.c	/^    FLASH_READ, FLASH_WRITE, NoExpectedValue = -1$/;"	e	enum:__anon8	file:
ProgramCommand	.\include\IO\m28w160ect.h	/^	ProgramCommand = 0x40,$/;"	e	enum:__anon6
ProgramErrorBit	.\include\IO\m28w160ect.h	/^	ProgramErrorBit = 1<<4,$/;"	e	enum:__anon7
ProgramSuspendBit	.\include\IO\m28w160ect.h	/^	ProgramSuspendBit = 1<<2,$/;"	e	enum:__anon7
RANDOM_OFF	.\src\HomeAutomation\LightScheduler.c	/^    TURN_ON, TURN_OFF, DIM, RANDOM_ON, RANDOM_OFF,$/;"	e	enum:__anon9	file:
RANDOM_ON	.\src\HomeAutomation\LightScheduler.c	/^    TURN_ON, TURN_OFF, DIM, RANDOM_ON, RANDOM_OFF,$/;"	e	enum:__anon9	file:
RUNTIME_ERROR	.\include\util\RuntimeError.h	34;"	d
RandomMinute_Create	.\src\HomeAutomation\RandomMinute.c	/^void RandomMinute_Create(int b)$/;"	f
RandomMinute_Get	.\src\HomeAutomation\RandomMinute.c	/^int (*RandomMinute_Get)(void) = RandomMinute_GetImpl;$/;"	v
RandomMinute_GetImpl	.\src\HomeAutomation\RandomMinute.c	/^int RandomMinute_GetImpl(void)$/;"	f
ReadyBit	.\include\IO\m28w160ect.h	/^	ReadyBit = 1<<7,$/;"	e	enum:__anon7
ReservedBit	.\include\IO\m28w160ect.h	/^	ReservedBit = 1$/;"	e	enum:__anon7
Reset	.\include\IO\m28w160ect.h	/^	Reset = 0xff$/;"	e	enum:__anon6
RuntimeError	.\mocks\RuntimeErrorStub.c	/^void RuntimeError(const char * m, int p, const char * f, int l)$/;"	f
RuntimeErrorStub_GetLastError	.\mocks\RuntimeErrorStub.c	/^const char * RuntimeErrorStub_GetLastError(void)$/;"	f
RuntimeErrorStub_GetLastParameter	.\mocks\RuntimeErrorStub.c	/^int RuntimeErrorStub_GetLastParameter(void)$/;"	f
RuntimeErrorStub_Reset	.\mocks\RuntimeErrorStub.c	/^void RuntimeErrorStub_Reset(void)$/;"	f
SATURDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
SUNDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
ScheduledLightEvent	.\src\HomeAutomation\LightScheduler.c	/^} ScheduledLightEvent;$/;"	t	typeref:struct:__anon10	file:
StatusRegister	.\include\IO\m28w160ect.h	/^	StatusRegister = 0x0$/;"	e	enum:__anon5
StatusRegisterBits	.\include\IO\m28w160ect.h	/^} StatusRegisterBits;$/;"	t	typeref:enum:__anon7
TEST	.\mocks\FormatOutputSpyTest.cpp	/^TEST(FormatOutputSpy, HelloWorld)$/;"	f
TEST	.\mocks\FormatOutputSpyTest.cpp	/^TEST(FormatOutputSpy, LimitTheOutputBufferSize)$/;"	f
TEST	.\mocks\FormatOutputSpyTest.cpp	/^TEST(FormatOutputSpy, PrintMultipleOutputsPastFull)$/;"	f
TEST	.\mocks\FormatOutputSpyTest.cpp	/^TEST(FormatOutputSpy, PrintMultipleTimes)$/;"	f
TEST	.\tests\HomeAutomation\FakeTimeServiceTest.cpp	/^TEST(FakeTimeService, Create)$/;"	f
TEST	.\tests\HomeAutomation\FakeTimeServiceTest.cpp	/^TEST(FakeTimeService, Set)$/;"	f
TEST	.\tests\HomeAutomation\LightControllerSpyTest.cpp	/^TEST(LightControllerSpy, Create)$/;"	f
TEST	.\tests\HomeAutomation\LightControllerSpyTest.cpp	/^TEST(LightControllerSpy, RememberAllLightStates)$/;"	f
TEST	.\tests\HomeAutomation\LightControllerSpyTest.cpp	/^TEST(LightControllerSpy, RememberTheLastLightIdControlled)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerRandomizeTest.cpp	/^TEST(LightSchedulerRandomize, TurnsOnEarly)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, AcceptsValidLightIds)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, NoChangeToLightsDuringInitialization)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, NoScheduleNothingHappens)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, RejectsInvalidLightIds)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, RejectsTooManyEvents)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, RemoveMultipleScheduledEvent)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, RemoveRecyclesScheduleSlot)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleOffEverydayItsTime)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleOnEverydayItsTime)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleOnEverydayNotTimeYet)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleTuesdayAndItsTuesday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleTuesdayButItsMonday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleTwoEventsAtTheSameTime)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleWeekEndItsFriday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleWeekEndItsMonday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleWeekEndItsSaturday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, ScheduleWeekEndItsSunday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, WeekdayScheduleIsOperatedOnMonday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightScheduler, WeekdayScheduleNotOperatedOnSunday)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightSchedulerInitAndCleanup, CreateStartsOneMinuteAlarm)$/;"	f
TEST	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST(LightSchedulerInitAndCleanup, DestroyCancelsOneMinuteAlarm)$/;"	f
TEST	.\tests\HomeAutomation\RandomMinuteTest.cpp	/^TEST(RandomMinute, AllValuesPossible)$/;"	f
TEST	.\tests\HomeAutomation\RandomMinuteTest.cpp	/^TEST(RandomMinute, GetIsInRange)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, SucceedsNotImmediatelyReady)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteFails_FlashReadBackError)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteFails_FlashUnknownProgramError)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteFails_ProgramError)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteFails_ProtectedBlockError)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteFails_VppError)$/;"	f
TEST	.\tests\IO\FlashTest.cpp	/^TEST(Flash, WriteSucceeds_ReadyImmediately)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, AllOff)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, AllOn)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, IsOff)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, IsOn)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, LedMemoryIsNotReadable)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, LedsOffAfterCreate)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, OutOfBoundsLedsAreAlwaysOff)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, OutOfBoundsProducesRuntimeError)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, OutOfBoundsTurnOffDoesNoHarm)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, OutOfBoundsTurnOnDoesNoHarm)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, TurnOffAnyLed)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, TurnOffLedOne)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, TurnOffMultipleLeds)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, TurnOnLedOne)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, TurnOnMultipleLeds)$/;"	f
TEST	.\tests\LedDriver\LedDriverTest.cpp	/^TEST(LedDriver, UpperAndLowerBounds)$/;"	f
TEST	.\tests\stdio\SprintfTest.cpp	/^TEST(sprintf, InsertString)$/;"	f
TEST	.\tests\stdio\SprintfTest.cpp	/^TEST(sprintf, NoFormatOperations)$/;"	f
TEST	.\tests\util\CircularBufferPrintTest.cpp	/^TEST(CircularBufferPrint, PrintAfterOneIsPut)$/;"	f
TEST	.\tests\util\CircularBufferPrintTest.cpp	/^TEST(CircularBufferPrint, PrintEmpty)$/;"	f
TEST	.\tests\util\CircularBufferPrintTest.cpp	/^TEST(CircularBufferPrint, PrintNotYetWrappedAndIsFull)$/;"	f
TEST	.\tests\util\CircularBufferPrintTest.cpp	/^TEST(CircularBufferPrint, PrintNotYetWrappedOrFull)$/;"	f
TEST_GROUP	.\mocks\FormatOutputSpyTest.cpp	/^TEST_GROUP(FormatOutputSpy)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\FakeTimeServiceTest.cpp	/^TEST_GROUP(FakeTimeService)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\LightControllerSpyTest.cpp	/^TEST_GROUP(LightControllerSpy)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\LightSchedulerRandomizeTest.cpp	/^TEST_GROUP(LightSchedulerRandomize)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST_GROUP(LightScheduler)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\LightSchedulerTest.cpp	/^TEST_GROUP(LightSchedulerInitAndCleanup)$/;"	f
TEST_GROUP	.\tests\HomeAutomation\RandomMinuteTest.cpp	/^TEST_GROUP(RandomMinute)$/;"	f
TEST_GROUP	.\tests\IO\FlashTest.cpp	/^TEST_GROUP(Flash)$/;"	f
TEST_GROUP	.\tests\LedDriver\LedDriverTest.cpp	/^TEST_GROUP(LedDriver)$/;"	f
TEST_GROUP	.\tests\stdio\SprintfTest.cpp	/^TEST_GROUP(sprintf)$/;"	f
TEST_GROUP	.\tests\util\CircularBufferPrintTest.cpp	/^TEST_GROUP(CircularBufferPrint)$/;"	f
THURSDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
TIME_UNKNOWN	.\tests\HomeAutomation\FakeTimeService.h	/^enum {TIME_UNKNOWN = -1};$/;"	e	enum:__anon14
TRUE	.\include\LedDriver\LedDriver.h	5;"	d
TRUE	.\include\util\common.h	38;"	d
TUESDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
TURN_OFF	.\src\HomeAutomation\LightScheduler.c	/^    TURN_ON, TURN_OFF, DIM, RANDOM_ON, RANDOM_OFF,$/;"	e	enum:__anon9	file:
TURN_ON	.\src\HomeAutomation\LightScheduler.c	/^    TURN_ON, TURN_OFF, DIM, RANDOM_ON, RANDOM_OFF,$/;"	e	enum:__anon9	file:
Time	.\include\HomeAutomation\TimeService.h	/^typedef struct Time$/;"	s
Time	.\include\HomeAutomation\TimeService.h	/^} Time;$/;"	t	typeref:struct:Time
TimeService_CancelPeriodicAlarmInSeconds	.\tests\HomeAutomation\FakeTimeService.c	/^void TimeService_CancelPeriodicAlarmInSeconds(int seconds, WakeUpCallback cb)$/;"	f
TimeService_Create	.\tests\HomeAutomation\FakeTimeService.c	/^void TimeService_Create(void)$/;"	f
TimeService_Destroy	.\tests\HomeAutomation\FakeTimeService.c	/^void TimeService_Destroy(void)$/;"	f
TimeService_GetTime	.\tests\HomeAutomation\FakeTimeService.c	/^void TimeService_GetTime(Time * time)$/;"	f
TimeService_SetPeriodicAlarmInSeconds	.\tests\HomeAutomation\FakeTimeService.c	/^void TimeService_SetPeriodicAlarmInSeconds(int seconds, WakeUpCallback cb)$/;"	f
UNUSED	.\src\HomeAutomation\LightScheduler.c	/^    UNUSED = -1,$/;"	e	enum:__anon9	file:
VppErrorBit	.\include\IO\m28w160ect.h	/^	VppErrorBit = 1<<3,$/;"	e	enum:__anon7
WEDNESDAY	.\include\HomeAutomation\LightScheduler.h	/^    SUNDAY=1, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY$/;"	e	enum:__anon2
WEEKDAY	.\include\HomeAutomation\LightScheduler.h	/^    NONE=-1, EVERYDAY=10, WEEKDAY, WEEKEND,$/;"	e	enum:__anon2
WEEKEND	.\include\HomeAutomation\LightScheduler.h	/^    NONE=-1, EVERYDAY=10, WEEKDAY, WEEKEND,$/;"	e	enum:__anon2
WINDOWS_VSNPRINTF_OVERWRITE	.\mocks\FormatOutputSpy.c	32;"	d	file:
WakeUpCallback	.\include\HomeAutomation\TimeService.h	/^typedef void (*WakeUpCallback)(void);$/;"	t
actual	.\mocks\MockIO.c	/^static Expectation actual;$/;"	v	file:
addr	.\mocks\MockIO.c	/^    ioAddress addr;$/;"	m	struct:Expectation	file:
bound	.\src\HomeAutomation\RandomMinute.c	/^static int bound = 0;$/;"	v	file:
buffer	.\mocks\FormatOutputSpy.c	/^static char * buffer = 0;$/;"	v	file:
buffer_offset	.\mocks\FormatOutputSpy.c	/^static int buffer_offset = 0;$/;"	v	file:
buffer_size	.\mocks\FormatOutputSpy.c	/^static size_t buffer_size = 0;$/;"	v	file:
buffer_used	.\mocks\FormatOutputSpy.c	/^static int buffer_used = 0;$/;"	v	file:
callBackCalled	.\tests\HomeAutomation\FakeTimeServiceTest.cpp	/^static int callBackCalled;$/;"	v	file:
callback	.\tests\HomeAutomation\FakeTimeService.c	/^static WakeUpCallback callback;$/;"	v	file:
capacity	.\src\util\CircularBuffer.c	/^    int capacity;$/;"	m	struct:CircularBufferStruct	file:
clearLedImageBit	.\src\LedDriver\LedDriver.c	/^static void clearLedImageBit(int ledNumber)$/;"	f	file:
convertLedNumberToBit	.\src\LedDriver\LedDriver.c	/^static uint16_t convertLedNumberToBit(int ledNumber)$/;"	f	file:
count	.\src\util\CircularBuffer.c	/^    int count;$/;"	m	struct:CircularBufferStruct	file:
day	.\src\HomeAutomation\LightScheduler.c	/^    Day day;$/;"	m	struct:__anon10	file:
dayOfWeek	.\include\HomeAutomation\TimeService.h	/^    int dayOfWeek;$/;"	m	struct:Time
event	.\src\HomeAutomation\LightScheduler.c	/^    int event;$/;"	m	struct:__anon10	file:
expectationIsNot	.\mocks\MockIO.c	/^static int expectationIsNot(int kind)$/;"	f	file:
expectations	.\mocks\MockIO.c	/^static Expectation * expectations = 0;$/;"	v	file:
expected	.\mocks\MockIO.c	/^static Expectation expected;$/;"	v	file:
expectedAddressIsNot	.\mocks\MockIO.c	/^static int expectedAddressIsNot(ioAddress addr)$/;"	f	file:
expectedDataIsNot	.\mocks\MockIO.c	/^static int expectedDataIsNot(ioData data)$/;"	f	file:
fail	.\mocks\MockIO.c	/^static void fail(char * message)$/;"	f	file:
failExpectation	.\mocks\MockIO.c	/^static void failExpectation(char * expectationFailMessage)$/;"	f	file:
failWhen	.\mocks\MockIO.c	/^static void failWhen(int condition, char * expectationFailMessage)$/;"	f	file:
failWhenNoRoomForExpectations	.\mocks\MockIO.c	/^static void failWhenNoRoomForExpectations(char * message)$/;"	f	file:
failWhenNoUnusedExpectations	.\mocks\MockIO.c	/^static void failWhenNoUnusedExpectations(char * format)$/;"	f	file:
failWhenNotAllExpectationsUsed	.\mocks\MockIO.c	/^static void failWhenNotAllExpectationsUsed(void)$/;"	f	file:
failWhenNotInitialized	.\mocks\MockIO.c	/^static void failWhenNotInitialized(void)$/;"	f	file:
failureAlreadyReported	.\mocks\MockIO.c	/^static int failureAlreadyReported = 0;$/;"	v	file:
fakeTime	.\tests\HomeAutomation\FakeTimeService.c	/^static Time fakeTime;$/;"	v	file:
file	.\mocks\RuntimeErrorStub.c	/^static const char * file = 0;$/;"	v	file:
getExpectationCount	.\mocks\MockIO.c	/^static int getExpectationCount;$/;"	v	file:
id	.\src\HomeAutomation\LightScheduler.c	/^    int id;$/;"	m	struct:__anon10	file:
increment	.\mocks\FakeRandomMinute.c	/^static int increment = -1;$/;"	v	file:
index	.\src\util\CircularBuffer.c	/^    int index;$/;"	m	struct:CircularBufferStruct	file:
ioAddress	.\include\IO\IO.h	/^typedef uint32_t ioAddress;$/;"	t
ioData	.\include\IO\IO.h	/^typedef uint16_t ioData;$/;"	t
isIdInRange	.\tests\HomeAutomation\LightControllerSpy.c	/^static int isIdInRange(int id)$/;"	f	file:
kind	.\mocks\MockIO.c	/^    int kind;$/;"	m	struct:Expectation	file:
lastId	.\tests\HomeAutomation\LightControllerSpy.c	/^static int lastId;$/;"	v	file:
lastState	.\tests\HomeAutomation\LightControllerSpy.c	/^static int lastState;$/;"	v	file:
ledsAddress	.\src\LedDriver\LedDriver.c	/^static uint16_t * ledsAddress;$/;"	v	file:
ledsImage	.\src\LedDriver\LedDriver.c	/^static uint16_t ledsImage;$/;"	v	file:
lights	.\tests\HomeAutomation\LightControllerSpy.c	/^static int lights[MAX_LIGHTS];$/;"	v	file:
line	.\mocks\RuntimeErrorStub.c	/^static int line = -1;$/;"	v	file:
main	.\tests\AllTests.cpp	/^int main(int ac, char** av)$/;"	f
maxExpectationCount	.\mocks\MockIO.c	/^static int maxExpectationCount;$/;"	v	file:
message	.\mocks\RuntimeErrorStub.c	/^static const char * message = "No Error";$/;"	v	file:
minuteOfDay	.\include\HomeAutomation\TimeService.h	/^    int minuteOfDay;$/;"	m	struct:Time
minuteOfDay	.\src\HomeAutomation\LightScheduler.c	/^    int minuteOfDay;$/;"	m	struct:__anon10	file:
operateLight	.\src\HomeAutomation\LightScheduler.c	/^static void operateLight(ScheduledLightEvent * lightEvent)$/;"	f	file:
outdex	.\src\util\CircularBuffer.c	/^    int outdex;$/;"	m	struct:CircularBufferStruct	file:
parameter	.\mocks\RuntimeErrorStub.c	/^static int parameter = -1;$/;"	v	file:
period	.\tests\HomeAutomation\FakeTimeService.c	/^static int period;$/;"	v	file:
processEventDueNow	.\src\HomeAutomation\LightScheduler.c	/^static void processEventDueNow(Time * time, ScheduledLightEvent * lightEvent)$/;"	f	file:
randomMinutes	.\src\HomeAutomation\LightScheduler.c	/^    int randomMinutes;$/;"	m	struct:__anon10	file:
randomize	.\src\HomeAutomation\LightScheduler.c	/^    int randomize;$/;"	m	struct:__anon10	file:
recordExpectation	.\mocks\MockIO.c	/^void recordExpectation(int kind, ioAddress addr, ioData data)$/;"	f
report_MockIO_not_initialized	.\mocks\MockIO.c	/^static char * report_MockIO_not_initialized =$/;"	v	file:
report_expect_read_was_write	.\mocks\MockIO.c	/^static char * report_expect_read_was_write =$/;"	v	file:
report_expect_write_was_read	.\mocks\MockIO.c	/^static char * report_expect_write_was_read =$/;"	v	file:
report_expectation_number	.\mocks\MockIO.c	/^static const char * report_expectation_number =$/;"	v	file:
report_no_more_expectations	.\mocks\MockIO.c	/^static const char * report_no_more_expectations =$/;"	v	file:
report_read_but_out_of_expectations	.\mocks\MockIO.c	/^static char * report_read_but_out_of_expectations =$/;"	v	file:
report_read_wrong_address	.\mocks\MockIO.c	/^static char * report_read_wrong_address =$/;"	v	file:
report_too_many_read_expectations	.\mocks\MockIO.c	/^static char * report_too_many_read_expectations =$/;"	v	file:
report_too_many_write_expectations	.\mocks\MockIO.c	/^static char * report_too_many_write_expectations =$/;"	v	file:
report_write_but_out_of_expectations	.\mocks\MockIO.c	/^static char * report_write_but_out_of_expectations =$/;"	v	file:
report_write_does_not_match	.\mocks\MockIO.c	/^static char * report_write_does_not_match =$/;"	v	file:
scheduleEvent	.\src\HomeAutomation\LightScheduler.c	/^static int scheduleEvent(int id, Day day, int minuteOfDay, int event)$/;"	f	file:
scheduledEvents	.\src\HomeAutomation\LightScheduler.c	/^static ScheduledLightEvent scheduledEvents[MAX_EVENTS];$/;"	v	file:
seed	.\mocks\FakeRandomMinute.c	/^static int seed = -1;$/;"	v	file:
setExpectationCount	.\mocks\MockIO.c	/^static int setExpectationCount;$/;"	v	file:
setExpectedAndActual	.\mocks\MockIO.c	/^static void setExpectedAndActual(ioAddress addr, ioData value)$/;"	f	file:
setLedImageBit	.\src\LedDriver\LedDriver.c	/^static void setLedImageBit(int ledNumber)$/;"	f	file:
snprintf	.\mocks\MockIO.c	34;"	d	file:
updateHardware	.\src\LedDriver\LedDriver.c	/^static void updateHardware(void)$/;"	f	file:
value	.\mocks\MockIO.c	/^    ioData value;$/;"	m	struct:Expectation	file:
values	.\src\util\CircularBuffer.c	/^    int * values;$/;"	m	struct:CircularBufferStruct	file:
vsnprintf	.\mocks\FormatOutputSpy.c	34;"	d	file:
